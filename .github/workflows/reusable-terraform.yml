name: Reusable Terraform

on:
  push:
    branches:
      - main
  # workflow_call:
  #   inputs:
  #     location:
  #       required: true
  #       type: string
  #   secrets:
  #     ENV_SECRET:
  #       required: true

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # We keep Terraform files in the terraform directory.
        working-directory: ./terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::828226612169:role/Cps-GitHub-Actions
          aws-region: eu-central-1
      # - name:  Setup Terraform with specified version on the runner
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.3.6
      # - name: Terraform Format
      #   id: fmt
      #   run: terraform fmt -check
      #   continue-on-error: true
      # - name: Terraform Init
      #   id: init
      #   run: terraform init
      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate
      # - name: Terraform plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true
      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      # - name: Terraform Format incorrect
      #   if: steps.fmt.outcome
      #   run: exit 1
      #   # run: terraform fmt
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
      - name: Environment
        run: env

      # - name: Terraform Apply (Development)
      #   if: github.ref != 'refs/heads/main'
      #   run: echo "deploy to stage - development"
      # - name: Terraform Apply (Staging)
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: echo "deploy to stage - staging"
      - name: Terraform Apply
        run: echo "deploy to environment -  ${{ inputs.location }}
      - name: üö® Expose my secret
        env:
          ENV_SECRET_INTERNAL: ${{ secrets.ENV_SECRET }}
        run: |
          import os
          data = open("file", "w")
          for q in (os.getenv("ENV_SECRET_INTERNAL")):
            print q
            data.write(q)
        shell: python
